// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/dollarshaveclub/guardian/ratelimit/src/config (interfaces: RateLimitConfig,RateLimitConfigLoader)

package mock_config

import (
	ratelimit "github.com/dollarshaveclub/guardian/ratelimit/proto/ratelimit"
	config "github.com/dollarshaveclub/guardian/ratelimit/src/config"
	gomock "github.com/golang/mock/gomock"
	gostats "github.com/lyft/gostats"
	context "golang.org/x/net/context"
)

// Mock of RateLimitConfig interface
type MockRateLimitConfig struct {
	ctrl     *gomock.Controller
	recorder *_MockRateLimitConfigRecorder
}

// Recorder for MockRateLimitConfig (not exported)
type _MockRateLimitConfigRecorder struct {
	mock *MockRateLimitConfig
}

func NewMockRateLimitConfig(ctrl *gomock.Controller) *MockRateLimitConfig {
	mock := &MockRateLimitConfig{ctrl: ctrl}
	mock.recorder = &_MockRateLimitConfigRecorder{mock}
	return mock
}

func (_m *MockRateLimitConfig) EXPECT() *_MockRateLimitConfigRecorder {
	return _m.recorder
}

func (_m *MockRateLimitConfig) Dump() string {
	ret := _m.ctrl.Call(_m, "Dump")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockRateLimitConfigRecorder) Dump() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Dump")
}

func (_m *MockRateLimitConfig) GetLimit(_param0 context.Context, _param1 string, _param2 *ratelimit.RateLimitDescriptor) *config.RateLimit {
	ret := _m.ctrl.Call(_m, "GetLimit", _param0, _param1, _param2)
	ret0, _ := ret[0].(*config.RateLimit)
	return ret0
}

func (_mr *_MockRateLimitConfigRecorder) GetLimit(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLimit", arg0, arg1, arg2)
}

// Mock of RateLimitConfigLoader interface
type MockRateLimitConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *_MockRateLimitConfigLoaderRecorder
}

// Recorder for MockRateLimitConfigLoader (not exported)
type _MockRateLimitConfigLoaderRecorder struct {
	mock *MockRateLimitConfigLoader
}

func NewMockRateLimitConfigLoader(ctrl *gomock.Controller) *MockRateLimitConfigLoader {
	mock := &MockRateLimitConfigLoader{ctrl: ctrl}
	mock.recorder = &_MockRateLimitConfigLoaderRecorder{mock}
	return mock
}

func (_m *MockRateLimitConfigLoader) EXPECT() *_MockRateLimitConfigLoaderRecorder {
	return _m.recorder
}

func (_m *MockRateLimitConfigLoader) Load(_param0 []config.RateLimitConfigToLoad, _param1 gostats.Scope) config.RateLimitConfig {
	ret := _m.ctrl.Call(_m, "Load", _param0, _param1)
	ret0, _ := ret[0].(config.RateLimitConfig)
	return ret0
}

func (_mr *_MockRateLimitConfigLoaderRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Load", arg0, arg1)
}
